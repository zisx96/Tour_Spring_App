spring.application.name=ToursProject

spring.profiles.active=dev

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true


#Logging Configuration
# Set the logging level
#TRACE ensures that all logging levels (TRACE, DEBUG, INFO, WARN, ERROR)
logging.level.root=TRACE
logging.level.com.tours=TRACE

# Specify a custom log file
logging.file.name=src/main/java/com/tours/Logging/app.log

# Set log file size and total log file
logging.file.size=1000MB
logging.file.total-size-cap=10000MB

# Define log pattern
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} - %5p - %c{1} - %m%n
logging.pattern.console=



# Session Configuration
server.servlet.session.timeout=30m
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=true

# Server Configuration
server.connection-timeout=20000
server.tomcat.connection-timeout=20000
server.tomcat.max-connections=200
server.tomcat.threads.max=200


#OAuth2 Configuration
#Google Configure
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_OAUTH2_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_OAUTH2_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid, email, profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google

spring.main.allow-circular-references=true


#Cloudinary Configuration
cloudinary.cloud-name=${CLOUDINARY_NAME}
cloudinary.api-key=${CLOUDINARY_API}
cloudinary.api-secret=${CLOUDINARY_API_SECRET}


# Stripe Configuration
stripe.secret.key=${STRIPE_SECRET}
stripe.publishable.key=${STRIPE_PUBLISHABLE_KEY}




